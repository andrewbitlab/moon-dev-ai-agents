#!/usr/bin/env python3
"""
🌙 Moon Dev: Strategy Discovery Tool

Finds and catalogs all backtest strategy files in the project.
Useful for discovering the 1,377+ strategies generated by RBI agents.

Usage:
    python scripts/find_strategies.py [options]

Examples:
    # Find all strategies in default location
    python scripts/find_strategies.py

    # Find strategies in custom directory
    python scripts/find_strategies.py --path /custom/path

    # Save inventory to CSV
    python scripts/find_strategies.py --output strategies_inventory.csv

    # Show only latest 50 strategies
    python scripts/find_strategies.py --latest 50

    # Filter by date folder
    python scripts/find_strategies.py --date-folder 03_14_2025
"""

import sys
import re
import csv
import json
from pathlib import Path
from typing import List, Dict
from datetime import datetime


class StrategyDiscovery:
    """Discovers and catalogs all backtest strategy files"""

    def __init__(self, root_path: str = None):
        """
        Args:
            root_path: Root directory to search (default: project src/data/rbi/)
        """
        if root_path is None:
            # Default to native Moon-Dev RBI data location
            root_path = Path(__file__).parent.parent / "data" / "rbi"

        self.root_path = Path(root_path)
        self.strategies: Dict[str, Dict] = {}

        print(f"🌙 MOON DEV: Strategy Discovery Tool")
        print(f"   Search path: {self.root_path}")

    def discover_all(self) -> Dict[str, Dict]:
        """
        Discover all strategy files in the project

        Returns:
            Dict mapping strategy name -> metadata dict
        """
        print(f"\n🔍🌙 MOON DEV: Scanning for strategy files...")

        if not self.root_path.exists():
            print(f"❌🌙 MOON DEV: Path does not exist: {self.root_path}")
            return {}

        # Patterns for strategy files (Moon-Dev conventions)
        patterns = [
            "*_BT.py",          # Standard RBI output
            "*_BTFinal.py",     # Final versions
            "*backtest*.py"     # Alternative naming
        ]

        all_files = []
        for pattern in patterns:
            files = list(self.root_path.rglob(pattern))
            all_files.extend(files)

        print(f"📊🌙 MOON DEV: Found {len(all_files)} strategy files")

        # Deduplicate by strategy name (keep newest)
        unique_strategies = {}

        for file_path in all_files:
            strategy_name = self._extract_strategy_name(file_path.name)

            metadata = {
                'name': strategy_name,
                'file_path': str(file_path),
                'file_name': file_path.name,
                'folder': file_path.parent.name,
                'date_folder': self._extract_date_folder(file_path),
                'file_size': file_path.stat().st_size,
                'modified_timestamp': file_path.stat().st_mtime,
                'modified_date': datetime.fromtimestamp(file_path.stat().st_mtime).strftime('%Y-%m-%d %H:%M:%S')
            }

            # Keep newest version if duplicate name
            if strategy_name not in unique_strategies:
                unique_strategies[strategy_name] = metadata
            else:
                if file_path.stat().st_mtime > unique_strategies[strategy_name]['modified_timestamp']:
                    unique_strategies[strategy_name] = metadata

        self.strategies = unique_strategies
        print(f"✅🌙 MOON DEV: Discovered {len(unique_strategies)} unique strategies")

        return unique_strategies

    def _extract_strategy_name(self, filename: str) -> str:
        """Extract clean strategy name from filename"""
        name = filename
        # Remove common suffixes
        name = re.sub(r'_BT(Final)?\.py$', '', name)
        name = re.sub(r'_backtest\.py$', '', name)
        name = re.sub(r'backtest_?', '', name, flags=re.IGNORECASE)
        return name

    def _extract_date_folder(self, file_path: Path) -> str:
        """Extract date folder from path (MM_DD_YYYY format)"""
        for part in file_path.parts:
            if re.match(r'\d{2}_\d{2}_\d{4}', part):
                return part
        return "unknown"

    def group_by_date(self) -> Dict[str, List[Dict]]:
        """Group strategies by date folder"""
        grouped = {}
        for strategy in self.strategies.values():
            date = strategy['date_folder']
            if date not in grouped:
                grouped[date] = []
            grouped[date].append(strategy)

        # Sort dates
        sorted_dates = sorted(grouped.keys())
        return {date: grouped[date] for date in sorted_dates}

    def get_latest(self, limit: int = None) -> List[Dict]:
        """Get newest strategies by modification time"""
        sorted_strategies = sorted(
            self.strategies.values(),
            key=lambda x: x['modified_timestamp'],
            reverse=True
        )
        return sorted_strategies[:limit] if limit else sorted_strategies

    def filter_by_date_folder(self, date_pattern: str) -> List[Dict]:
        """Filter strategies by date folder pattern"""
        return [
            s for s in self.strategies.values()
            if re.search(date_pattern, s['date_folder'])
        ]

    def save_inventory_csv(self, output_path: str):
        """Save strategy inventory to CSV file"""
        output_file = Path(output_path)
        output_file.parent.mkdir(parents=True, exist_ok=True)

        with open(output_file, 'w', newline='') as f:
            fieldnames = ['name', 'file_path', 'folder', 'date_folder',
                         'file_size', 'modified_date']
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()

            for strategy in sorted(self.strategies.values(), key=lambda x: x['name']):
                writer.writerow({
                    'name': strategy['name'],
                    'file_path': strategy['file_path'],
                    'folder': strategy['folder'],
                    'date_folder': strategy['date_folder'],
                    'file_size': strategy['file_size'],
                    'modified_date': strategy['modified_date']
                })

        print(f"💾🌙 MOON DEV: Inventory saved to {output_path}")

    def save_inventory_json(self, output_path: str):
        """Save strategy inventory to JSON file"""
        output_file = Path(output_path)
        output_file.parent.mkdir(parents=True, exist_ok=True)

        data = {
            'timestamp': datetime.now().isoformat(),
            'total_strategies': len(self.strategies),
            'search_path': str(self.root_path),
            'strategies': list(self.strategies.values())
        }

        with open(output_file, 'w') as f:
            json.dump(data, f, indent=2)

        print(f"💾🌙 MOON DEV: Inventory saved to {output_path}")

    def print_summary(self):
        """Print summary of discovered strategies"""
        if not self.strategies:
            print("⚠️🌙 MOON DEV: No strategies found")
            return

        print(f"\n{'='*80}")
        print(f"📊🌙 MOON DEV: STRATEGY DISCOVERY SUMMARY")
        print(f"{'='*80}")
        print(f"Total unique strategies: {len(self.strategies)}")
        print("")

        # Group by date
        by_date = self.group_by_date()
        print(f"Date folders found: {len(by_date)}")
        print("")

        # Top 10 date folders by strategy count
        print(f"🏆 Top 10 Date Folders (by strategy count):")
        print(f"{'-'*80}")
        print(f"{'Date Folder':<20} {'Strategies':<15} {'Sample Strategy':<45}")
        print(f"{'-'*80}")

        top_folders = sorted(by_date.items(), key=lambda x: len(x[1]), reverse=True)[:10]
        for date, strategies in top_folders:
            count = len(strategies)
            sample = strategies[0]['name'][:43] if strategies else 'N/A'
            print(f"{date:<20} {count:<15} {sample:<45}")

        print("")

        # Latest 10 strategies
        latest = self.get_latest(10)
        if latest:
            print(f"📅 Latest 10 Strategies (by modification date):")
            print(f"{'-'*80}")
            print(f"{'Strategy Name':<40} {'Date Folder':<20} {'Modified':<20}")
            print(f"{'-'*80}")

            for strategy in latest:
                name = strategy['name'][:38]
                date = strategy['date_folder']
                modified = strategy['modified_date']
                print(f"{name:<40} {date:<20} {modified:<20}")

        print(f"{'='*80}\n")


def main():
    """Main CLI function"""
    import argparse

    parser = argparse.ArgumentParser(
        description="🌙 Moon Dev: Discover and catalog all backtest strategies",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )

    parser.add_argument(
        '--path',
        type=str,
        help='Root path to search (default: src/data/rbi/)'
    )

    parser.add_argument(
        '--output',
        type=str,
        help='Output file path (.csv or .json)'
    )

    parser.add_argument(
        '--latest',
        type=int,
        metavar='N',
        help='Show only N latest strategies'
    )

    parser.add_argument(
        '--date-folder',
        type=str,
        metavar='PATTERN',
        help='Filter by date folder pattern (e.g., 03_14_2025)'
    )

    parser.add_argument(
        '--summary-only',
        action='store_true',
        help='Show only summary, no file output'
    )

    args = parser.parse_args()

    # Create discovery tool
    discovery = StrategyDiscovery(root_path=args.path)

    # Discover strategies
    strategies = discovery.discover_all()

    if not strategies:
        print("❌🌙 MOON DEV: No strategies found!")
        return

    # Apply filters
    if args.date_folder:
        filtered = discovery.filter_by_date_folder(args.date_folder)
        print(f"\n🔍🌙 MOON DEV: Filtered to {len(filtered)} strategies matching '{args.date_folder}'")
        discovery.strategies = {s['name']: s for s in filtered}

    if args.latest:
        latest = discovery.get_latest(args.latest)
        print(f"\n🔍🌙 MOON DEV: Showing {len(latest)} latest strategies")
        discovery.strategies = {s['name']: s for s in latest}

    # Print summary
    discovery.print_summary()

    # Save output
    if args.output and not args.summary_only:
        if args.output.endswith('.csv'):
            discovery.save_inventory_csv(args.output)
        elif args.output.endswith('.json'):
            discovery.save_inventory_json(args.output)
        else:
            print("⚠️🌙 MOON DEV: Output file must be .csv or .json")
    elif not args.summary_only:
        # Default: save to data directory
        default_output = Path(__file__).parent.parent / "data" / "strategy_inventory.json"
        discovery.save_inventory_json(str(default_output))


if __name__ == "__main__":
    main()
